# TODO: : cleanup / helmify
# https://fluxcd.io/flux/guides/cron-job-image-auth/#using-cronjob-to-sync-ecr-credentials-as-a-kubernetes-secret
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
#  namespace: flux-system
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
rules:
  - apiGroups: [""]
    resources:
      - secrets
    verbs:
      - get
      - create
      - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
#  namespace: flux-system
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
subjects:
  - kind: ServiceAccount
    name: ecr-credentials-sync
roleRef:
  kind: Role
  name: ecr-credentials-sync
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-credentials-sync
  # namespace: flux-system
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
  # Uncomment and edit if using IRSA
  # eks.amazonaws.com/role-arn: <role arn>
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ecr-credentials-sync
  # namespace: flux-system
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  suspend: false
  schedule: 0 */6 * * *
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-credentials-sync
          restartPolicy: Never
          volumes:
            - name: token
              emptyDir:
                medium: Memory
          initContainers:
            - image: amazon/aws-cli
              name: get-token
              imagePullPolicy: IfNotPresent
              # You will need to set the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables if not using
              # IRSA. It is recommended to store the values in a Secret and load them in the container using envFrom.
              envFrom:
                - secretRef:
                    name: aws-env
              env:
                - name: REGION
                  value: eu-central-1 # change this if ECR repo is in a different region
              volumeMounts:
                - mountPath: /token
                  name: token
              command:
                - /bin/sh
                - -ce
                - aws ecr get-login-password --region ${REGION} > /token/ecr-token
          containers:
            - image: ghcr.io/fluxcd/flux-cli:v0.25.2
              name: create-secret
              imagePullPolicy: IfNotPresent
              env:
                - name: DOCKER_SECRET_NAME
                  value: regcred # ecr-credentials
                - name: ECR_REGISTRY
                  value: 597031446072.dkr.ecr.eu-central-1.amazonaws.com # fill in the account id and region
              volumeMounts:
                - mountPath: /token
                  name: token
              command:
                - /bin/sh
                - -ce
                - |-
                  kubectl create secret docker-registry $DOCKER_SECRET_NAME \
                    --dry-run=client \
                    --docker-server="$ECR_REGISTRY" \
                    --docker-username=AWS \
                    --docker-password="$(cat /token/ecr-token)" \
                    -o yaml | kubectl apply -f -
            - image: ghcr.io/fluxcd/flux-cli:v0.25.2
              name: create-helm-secret
              imagePullPolicy: IfNotPresent
              env:
                - name: HELM_SECRET_NAME
                  value: ecr-helm # ecr-credentials
                - name: ECR_REGISTRY
                  value: 597031446072.dkr.ecr.eu-central-1.amazonaws.com # TODO: fill in the account id and region
              volumeMounts:
                - mountPath: /token
                  name: token
              command:
               - /bin/sh
               - -ce
               - |-
                  kubectl create secret generic $HELM_SECRET_NAME \
                   --dry-run=client \
                   --from-literal=username=AWS \
                   --from-literal=password="$(cat /token/ecr-token)" \
                   -o yaml | kubectl apply -f -
---
# TODO: Helm lifecyle
apiVersion: batch/v1
kind: Job
metadata:
  name: ecr-credentials-init
  # namespace: flux-system
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  # activeDeadlineSeconds: 0
  backoffLimit: 3
  suspend: false
  template:
    spec:
      serviceAccountName: ecr-credentials-sync
      restartPolicy: Never
      volumes:
        - name: token
          emptyDir:
            medium: Memory
      initContainers:
        - image: amazon/aws-cli
          name: get-token
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: aws-env
          env:
            - name: REGION
              value: eu-central-1 # change this if ECR repo is in a different region
          volumeMounts:
            - mountPath: /token
              name: token
          command:
            - /bin/sh
            - -ce
            - aws ecr get-login-password --region ${REGION} > /token/ecr-token
      containers:
        - image: ghcr.io/fluxcd/flux-cli:v0.25.2
          name: create-secret
          imagePullPolicy: IfNotPresent
          env:
            - name: DOCKER_SECRET_NAME
              value: regcred # ecr-credentials
            - name: ECR_REGISTRY
              value: 597031446072.dkr.ecr.eu-central-1.amazonaws.com # TODO: fill in the account id and region
          volumeMounts:
            - mountPath: /token
              name: token
          command:
            - /bin/sh
            - -ce
            - |-
              kubectl create secret docker-registry $DOCKER_SECRET_NAME \
                --dry-run=client \
                --docker-server="$ECR_REGISTRY" \
                --docker-username=AWS \
                --docker-password="$(cat /token/ecr-token)" \
                -o yaml | kubectl apply -f -
        - image: ghcr.io/fluxcd/flux-cli:v0.25.2
          name: create-helm-secret
          imagePullPolicy: IfNotPresent
          env:
            - name: HELM_SECRET_NAME
              value: ecr-helm # ecr-credentials
            - name: ECR_REGISTRY
              value: 597031446072.dkr.ecr.eu-central-1.amazonaws.com # TODO: fill in the account id and region
          volumeMounts:
            - mountPath: /token
              name: token
          command:
            - /bin/sh
            - -ce
            - |-
              kubectl create secret generic $HELM_SECRET_NAME \
                --dry-run=client \
                --from-literal=username=AWS \
                --from-literal=password="$(cat /token/ecr-token)" \
                -o yaml | kubectl apply -f -
